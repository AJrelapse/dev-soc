generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  regno  String?  @unique
  name   String?
  isExc  Boolean @default(false)
  role   Role    @default(Jr)
  phno   String?
  email  String?
  authId String   @id

  eventsScan         Event[]       @relation("EventAttendance")
  scannedAttendances Attendance[]  @relation("ScannedAttendances")
  suggestions        Suggestions[]
  exc                Exc?
  scanners           Scanners[]
  sentChats          chats[]       @relation("Sender")
  receivedChats      chats[]       @relation("Receiver")

  Event              Event[]
  ParticipatedEvents Event[]      @relation("ExcParticipation")
  Attendance         Attendance[]

  ChatGroupMember ChatGroupMember[]

  ChatGroup ChatGroup[]
}

model Event {
  id          String     @id @default(uuid())
  name        String
  description String
  from        DateTime
  to          DateTime
  maxCapacity Int
  location    String
  type        EventTypes
  pocRegno    String
  poc         User       @relation(fields: [pocRegno], references: [regno])

  attendees Attendance[] @relation("EventAttendance")
  excEvents Exc[]        @relation("ExcParticipation")
  scanners  Scanners[]

  Attendance Attendance[]

  UserTakingAttendance User[] @relation("EventAttendance")

  ExcUser User[] @relation("ExcParticipation")
}

model Suggestions {
  id          String  @id @default(uuid())
  title       String
  description String
  regno       String
  suggested   User    @relation(fields: [regno], references: [regno])
  isApproved  Boolean
}

model Attendance {
  id        String  @id @default(uuid())
  regno     String
  scannedBy String
  attended  Boolean
  user      User    @relation(fields: [regno], references: [regno])
  eventId   String
  event     Event   @relation(fields: [eventId], references: [id])
  scanner   User    @relation("ScannedAttendances", fields: [scannedBy], references: [regno])

  Event Event[] @relation("EventAttendance")
}

model Exc {
  regno String @id
  user  User   @relation(fields: [regno], references: [regno])

  Event Event[] @relation("ExcParticipation")
}

model Scanners {
  regno   String
  eventId String
  from    DateTime
  to      DateTime
  user    User     @relation(fields: [regno], references: [regno])
  event   Event    @relation(fields: [eventId], references: [id])

  @@id([regno, eventId])
}

model chats {
  message_id  String   @id @default(uuid())
  sender      String
  receiver    String?
  chatGroupId String?
  message     String[]
  time        DateTime @default(now())
  is_sent     Boolean?
  chatType    ChatType

  senderUser   User       @relation("Sender", fields: [sender], references: [regno])
  receiverUser User?      @relation("Receiver", fields: [receiver], references: [regno])
  chatGroup    ChatGroup? @relation(fields: [chatGroupId], references: [id])

  @@index([receiver])
  @@index([chatGroupId])
}

model ChatGroup {
  id            String            @id @default(uuid())
  name          String
  createdBy     String
  isAdmin       Boolean
  createdByUser User              @relation(fields: [createdBy], references: [regno])
  messages      chats[]
  members       ChatGroupMember[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ChatGroupMember {
  id      String    @id @default(uuid())
  userId  String
  groupId String
  user    User      @relation(fields: [userId], references: [regno])
  group   ChatGroup @relation(fields: [groupId], references: [id])

  joinedAt DateTime @default(now())

  @@unique([userId, groupId])
}

enum Role {
  Board
  Sr
  Jr
}

enum EventTypes {
  Workshop
  Webinar
  Hackathon
  Conference
  Meetup
  Other
}

enum ChatType {
  PRIVATE
  GROUP
}
